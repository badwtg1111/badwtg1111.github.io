<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Badwtg1111's Blog]]></title>
  <link href="http://badwtg1111.github.io/atom.xml" rel="self"/>
  <link href="http://badwtg1111.github.io/"/>
  <updated>2015-01-12T14:09:13+08:00</updated>
  <id>http://badwtg1111.github.io/</id>
  <author>
    <name><![CDATA[badwtg1111]]></name>
    <email><![CDATA[badwtg1111@hotmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WEBRTC书籍]]></title>
    <link href="http://badwtg1111.github.io/blog/2015/01/12/webrtcshu-ji/"/>
    <updated>2015-01-12T14:07:26+08:00</updated>
    <id>http://badwtg1111.github.io/blog/2015/01/12/webrtcshu-ji</id>
    <content type="html"><![CDATA[<p>转: 研究音频编解码要看什么书</p>

<p>前言。。。。。。</p>

<p>最近总是有人问研究音频编解码要看什么书</p>

<p>其实这是一个很难回答的问题，原因有很多。</p>

<p>首先，做工程首先一个问题就是和课本学习不同，不是看书能解决的。</p>

<p>其次，音频编解码技术在国内研究的人很少包括总体的音频技术国内相对国外都研究的不多。（从中国的潜艇噪声技术一直解决不好就能看出一二）。</p>

<p>第三，音频编解码技术是一种应用，而一般的书籍都是理论基础。</p>

<p>只看理论书籍和应用脱离太多，没有实用会忘记。</p>

<p>我当初看书也是从工程入手，就是在实际工作中和个人兴趣中看了大量的标准，然后对不懂的地方找论文，再找书籍补知识。可以说这是典型的逆向学习。</p>

<p>通常研究生是课本->看论文->做工程。</p>

<p>但是我还是总结 一下关于如何看书的问题，希望对入门者有帮助</p>

<p>概述。。。。。</p>

<p>首先，音频编解码技术是一种比较复杂的应用，而普通的书籍是一种理论书籍尤其是在中国。一会解释这句话。</p>

<p>其次，音频编解码技术和一般的音频技术不同，比如AEC，HRTF，后者分别是语音和音频的应用技术，应该说是一种具体的应用技术，相对来说查资料还是容易有的放矢。</p>

<p>分解。。。。。</p>

<p>其实音频编解码技术也是一种具体的应用技术，但是可能系统相对复杂，目的相对基础。它是信源编解码技术的一个分支，目的就是压缩数据。</p>

<p>那么音频编解码技术包括哪些方面呢？</p>

<p>既然他是一种信源编解码器技术（Source Coding Technology）那么信源编解码技术的书籍都可以看，做理论基础学习。</p>

<p>另外其实我把音频编解码技术分为5大技术，EQTPM，E，熵编码，Q，量化编码，T，变换编码，P，预测编码，M，音频建模（感知建模，BCC建模，正弦建模等）</p>

<p>这里包括4类书籍：</p>

<p>1.语音编解码书籍，因为国内讲宽带音频编解码的书籍很少，所以可以看些语音编解码的书籍，里面也有讲EQTP技术。</p>

<p>例如：《语音处理技术》，《语音编码》，《低码率音频编码》，《数字语音编码原理》，《变速率语音编码》《低速率语音编码》《数字语音编码》《数据压缩》</p>

<p>《JPEG2000 图像压缩基础》：我认为这本书讲的还是不错的,翻译的也不错，很多基本原理讲的比较透彻。</p>

<p>2.理论基础书籍,《信息论与编码》，《信号与系统》，高数这类我就不但列出来了，但是也要常番。</p>

<p>3.国外的宽音频编码书籍,例如我认为很经典的ANDREAS SPANIAS的《Audio Signal Processing and Coding 》。以及他的63页的论文，《Perceptual Coding of Digital Audio》。</p>

<p>其他可看的书籍包括：</p>

<p>MP3之父——K. Brandenburg的《Applications of Digital Signal Processing to Audio and Acoustics》</p>

<p>《A Digital Signal Processing Primer, with Applications to Digital Audio and Computer Music》</p>

<p>《Auditory Perception and the MPEG Audio Standard》</p>

<p>《Foundation and Evolution of Standardized Coders (Wiley,2003)(ISBN 0471373125)(578s)》</p>

<p>汉堡联邦国防军大学Udo Zolzer教授的《Digital Audio Signal Processing》</p>

<p>《High-Fidelity Multichannel Audio Coding》</p>

<p>《Speech Coding Algorithms》</p>

<p>我强烈推荐把SPANIAS的书读一下。至少把SPANIAS的那个论文仔细看一下。你会对音频编码的理解有很深的帮助。但是里面会将很多关于耳朵的生理词语，要拿着字典慢慢翻。这个论文我是烦烂了的。使我受益匪浅。</p>

<p>后面的书籍我还没有系统看过，但都有PDF版本，我也是偶尔翻一下。因为这些经典书籍你不花大时间理解，会造成假象是乍看起来都讲得类似，但实际理解起来发现是对不同细节的阐述。</p>

<p>4.其他类书籍</p>

<p>专门书籍，</p>

<p>如《自适应信号处理》，因为音频编码也好其他音频技术也好，自适应技术是经常使用的。例如无损编码的Wavpack，MPEG4 ALS，都使用了自适应技术。</p>

<p>滤波器设计的相关书籍。</p>

<p>《多抽样率数字信号处理理论及其应用》：讲解Transform技术。</p>

<p>HE-AAC和ATRAC3，使用的QMF，</p>

<p>MP3 使用的PQF</p>

<p>AAC，MP3使用的MDCT</p>

<p>AC3使用的TDAC（MDCT）</p>

<p>WMA和G。722.1的(MLT)</p>

<p>都是为什么，选择这些变换工具。有什么区别。</p>

<p>如果你能看看Vaidyananthan PP的书，会更有帮助。</p>

<p>最后。。。。。。。。。</p>

<p>除了这些书籍，建议大家多看看论文。</p>

<p>很多国外的大学都有专门的论文和PPT教学。</p>

<p>我把论文分3类。</p>

<p>1.会议论文（有的讲的很有点概况，有的有些对原理公式还是讲的比较清楚，还有一些强调系统性和介绍的）。</p>

<p>例如：伦敦学院的《A Survey of Packet Loss Recovery Techniques for Streaming Audio》 对PLC技术做了系统归纳</p>

<p>L Daudet的《A review on techniques for the extraction of transients in musical signals》对瞬态信号提取技术做了归纳。</p>

<p>2.毕业论文。往往讲的很详细。</p>

<p>这里我举2个例子，文章太多我就截屏解释吧。</p>

<p>3.经典PPT</p>

<p>例如很多大学和机构开放课程会有一些经典PPT。</p>

<p>例如：德国Fraunhofer的主页就有很多奖MPEG系列音频编码技术的PPT。非常好，非常推荐。</p>

<p>除了论文，我们还可以看一些一些常用的网址</p>

<p>我就给一个好了，超经典的</p>

<p>斯坦福大学</p>

<p>Julius Orion Smith III 教授的主页</p>

<p><a href="https://ccrma.stanford.edu/~jos/">https://ccrma.stanford.edu/~jos/</a></p>

<p>不说了，自己看吧，引用里面的介绍&ndash;(1GB of on-line publications, sound examples, and software )</p>

<p>结语。。。。。。。。</p>

<p> 馒头要一口一口吃，耐心些，开始吧</p>

<p>from: <a href="http://www.cnblogs.com/gaozehua/archive/2012/04/28/2474488.html">http://www.cnblogs.com/gaozehua/archive/2012/04/28/2474488.html</a></p>

<p>欢迎访问 www.webrtccn.com</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WEBRTC开发工具]]></title>
    <link href="http://badwtg1111.github.io/blog/2015/01/12/webrtckai-fa-gong-ju/"/>
    <updated>2015-01-12T12:35:34+08:00</updated>
    <id>http://badwtg1111.github.io/blog/2015/01/12/webrtckai-fa-gong-ju</id>
    <content type="html"><![CDATA[<p>AT&amp;T发布WebRTC开发工具 作者 丛一 发布于 2015年1月11日 | 讨论
分享到： 微博 微信 Facebook Twitter 有道云笔记 邮件分享
稍后阅读我的阅读清单
为什么我们只能用电话打电话？尽管谷歌和苹果都为用户提供了在手机、平板电脑和便携电脑之间互通文本消息和即时消息的功能，但传统的电话呼叫还是只能受限于一个设备。现在AT&amp;T公司正在试图利用WebRTC技术终结这种窘境，向前迈出一大步。WebRTC可以让你在智能手机上拨打电话，然后将通话转移到便携电脑的浏览器会话中，反之亦然。</p>

<p>AT&amp;T在2015年AT&amp;T开发者峰会上发布了一款增强版WebRTC技术的开发工具，无需插件就可以在浏览器之间进行音频或视频通话。并且声称他们是第一家利用AT&amp;T的增强版WebRTC API为WebRTC提供商业化支持的美国电信运营商。尽管AT&amp;T是第一家发布商用WebRTC API的美国运营商，WebRTC实际上是一种正逐渐被世界范围内的运营商广泛采纳的工业标准。Telefonica已经支持WebRTC有一段时间了，而其他的运营商的身影也频频出现在各种WebRTC的研讨会上，尽管目前还暂未见到有比较重要的公告发布。</p>

<p>AT&amp;T的增强版WebRTC API目前已发布公开测试版本并且在WebRTC基础上做了一些功能改进。第一个改进是增强版WebRTC的通信可以扩展到固定电话和移动电话之间，而不仅是端对端的或浏览器会话间的。这对于开发者和用户来说都是相当有价值的并且因为消除了一个关键障碍，会大大刺激这种技术采用量的增长。第二个改进是利用终端用户的AT&amp;T移动电话号码，开发者可以编程支持来自浏览器的WebRTC通信的来电显示。最后一个改进是开发者可以将从PC、MAC或平板电脑上发起的呼叫转移到智能手机上。</p>

<p>在开发者峰会的现场演示中，AT&amp;T和Plantronics向参会者展示了一个工人如何利用增强版WebRTC API通过他的移动电话号码发起可视对话然后通过便携电脑完成了一次在线航班预定。然后又将预定确认信息和其他细节信息传输到其移动电话之中。</p>

<p>据AT&amp;T的移动化首席营销官David Christopher在开发者峰会上介绍：“AT&amp;T强大的增强版WebRTC API给广大开发者提供了一个重新想象以IP为中心的互联世界中的电话和视频通话体验的机会。WebRTC被分析师们看作是过去数年来最具破坏性的通讯技术之一，我们认为就其能够为企业和消费者所能带来的价值而言，标准的采用以及相关的创新发展将会有非常快速地增长。”</p>

<p>感谢郭蕾对本文的审校。</p>

<p>给InfoQ中文站投稿或者参与内容翻译工作，请邮件至editors@cn.infoq.com。也欢迎大家通过新浪微博（@InfoQ）或者腾讯微博（@InfoQ）关注我们，并与我们的编辑和其他读者朋友交流。</p>

<p>【QCon北京2015大会】把握趋势，邀请国内外顶级专家，设计涵盖大数据、云计算、移动开发、技术创业、前端和敏捷等热点领域的18个专题，IT领域的技术盛宴。了解详情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[goagent ubuntu]]></title>
    <link href="http://badwtg1111.github.io/blog/2015/01/05/goagent-ubuntu/"/>
    <updated>2015-01-05T18:59:57+08:00</updated>
    <id>http://badwtg1111.github.io/blog/2015/01/05/goagent-ubuntu</id>
    <content type="html"><![CDATA[<p>Ubuntu下安装goagent
一生之盟 一生之盟 2013-06-25 12:37:22
下载并安装goagent和Google AppEngine SDK</p>

<p>goagent下载地址：<a href="http://code.google.com/p/goagent/">http://code.google.com/p/goagent/</a></p>

<p>首页已经给出下载版本，本次使用goagent 1.7.10 稳定版。</p>

<p>Google AppEngine
SDK下载地址：<a href="https://code.google.com/intl/zh-CN/appengine/downloads.html">https://code.google.com/intl/zh-CN/appengine/downloads.html</a></p>

<p>Google AppEngine SDK请下载Google AppEngine SDK for Python版本（linux）。</p>

<p>下载 Google AppEngine
SDK后解压google_appengine到自己的主目录，比如我的主目录是/home/leo/，解压完成后，进入/home/leo/google_appengine/。</p>

<p>下载goagent解压goagent到google_appengine目录下，解压完成应该存在/home/leo/google_appengine/goagent</p>

<p>配置并上传goagent。</p>

<p>打开goagent目录，进入目录下server/python目录，修改app.yaml文件中application为刚刚申请的AppID。</p>

<p>在google_appengine目录下，执行./appcfg.py update
./goagent/server/python上传，会提示输入AppID,以及你的邮箱，和刚申请的应用程序专用密码。</p>

<p>在goagent目录下，下该local目录下proxy.ini文件，将文件中[ gae  ]项目的appid修改为
你使用的AppID.</p>

<p>然后在local目录下，运行python proxy.py，即可使用代理。</p>

<p>安装SwitchySharp插件，最后导入这个设置<a href="http://goagent.googlecode.com/files/SwitchyOptions.bak%E5%AF%BC%E5%85%A5%E6%96%87%E4%BB%B6%E6%98%AF%E6%8C%87%E5%9C%A8SwitchySharp%E6%8F%92%E4%BB%B6%E9%80%89%E9%A1%B9%E4%B8%AD%E7%9A%84%E5%AF%BC%E5%85%A5/%E5%AF%BC%E5%87%BA%E8%AE%BE%E7%BD%AE%EF%BC%8C%E4%BB%8E%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D%E3%80%82">http://goagent.googlecode.com/files/SwitchyOptions.bak%E5%AF%BC%E5%85%A5%E6%96%87%E4%BB%B6%E6%98%AF%E6%8C%87%E5%9C%A8SwitchySharp%E6%8F%92%E4%BB%B6%E9%80%89%E9%A1%B9%E4%B8%AD%E7%9A%84%E5%AF%BC%E5%85%A5/%E5%AF%BC%E5%87%BA%E8%AE%BE%E7%BD%AE%EF%BC%8C%E4%BB%8E%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D%E3%80%82</a></p>

<p>安装证书导入工具</p>

<p>apt-get install libnss3-tools</p>

<p>将goAgent文件夹内的证书文件CA.crt导入(注意证书的绝对路)</p>

<pre><code>certutil -d sql:$HOME/.pki/nssdb -A -t TC -n "goagent" -i
/home/dn/google_appengine/goagent-goagent-91cd5e4/local/CA.crt  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[welcome to webrtc forum]]></title>
    <link href="http://badwtg1111.github.io/blog/2014/12/25/welcome-to-webrtc-forum/"/>
    <updated>2014-12-25T17:05:57+08:00</updated>
    <id>http://badwtg1111.github.io/blog/2014/12/25/welcome-to-webrtc-forum</id>
    <content type="html"><![CDATA[<p>webrtc论坛：
<a href="http://www.webrtccn.com">http://www.webrtccn.com</a></p>

<p>欢迎加入，共同探讨webrtc相关技术.</p>
]]></content>
  </entry>
  
</feed>
